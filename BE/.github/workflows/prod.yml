name: Production Build and Deploy to AWS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1-1. Java 21 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 1-2. application.yml 파일 생성
      - name: make application.yml
        run: |
          # create application.yml
          cd ./src/main
          cd ./resources

          # application.yml 파일 생성하기
          touch ./application.yml

          # Secrets에 저장한 값을 application.yml 파일에 쓰기
          echo "${{ secrets.YML }}" >> ./application.yml
        shell: bash # 스크립트가 Bash 셸에서 실행

      # 1-1. firebase serviceAccountKey.json 파일 생성
      - name: make firebase serviceAccountKey.json
        run: |
          mkdir -p ./src/main/resources/firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > ./src/main/resources/firebase/serviceAccountKey.json

      # 1-3. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew 
          ./gradlew clean build -x test

      # 2. AWS CLI 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Docker 로그인
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPO }}

      # 4-0. 이미지 태그 생성
      - name: Generate image tag (date + run_id)
        id: image-tag
        run: echo "IMAGE_TAG=$(date +'%Y-%m-%d-%H%M%S')-${{ github.run_id }}" >> $GITHUB_ENV

      # 4. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPO }}:latest -t ${{ secrets.AWS_ECR_REPO }}:$IMAGE_TAG .

      # 5. Docker 이미지 푸시
      - name: Push to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REPO }}:latest
          docker push ${{ secrets.AWS_ECR_REPO }}:$IMAGE_TAG


      # 6. 배포 패키지 만들기 (Dockerrun.aws.json)
      - name: Create deployment zip for EB
        run: |
          mkdir -p deploy
          echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > deploy/docker-compose.yml
          cd deploy
          zip deploy.zip docker-compose.yml
      

      # 7. Elastic Beanstalk 배포
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: ${{ secrets.EB_ENV_NAME }}
          version_label: compose-${{ github.run_id }}
          wait_for_deployment: false
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy/deploy.zip
